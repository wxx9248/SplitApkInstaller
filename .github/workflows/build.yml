name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Global permissions for the workflow
permissions:
  pull-requests: read  # Required for PR workflows

env:
  MAIN_PROJECT_MODULE: app

jobs:
  # Job for building debug APK on pull requests
  build-debug:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Read repository code
      actions: read   # Read workflow artifacts

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Build debug APK
        run: ./gradlew assembleDebug

      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-${{ github.event.pull_request.number }}
          path: ${{ env.MAIN_PROJECT_MODULE }}/build/outputs/apk/debug/*.apk
          retention-days: 7

  # Job for building release artifacts and creating GitHub release
  build-release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases, tags, and uploading assets
      actions: read    # Read workflow artifacts

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history for version extraction

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Extract version from build.gradle.kts
        run: |
          VERSION_NAME=$(grep 'versionName = ' ${{ env.MAIN_PROJECT_MODULE }}/build.gradle.kts | sed 's/.*versionName = "\(.*\)".*/\1/')
          VERSION_CODE=$(grep 'versionCode = ' ${{ env.MAIN_PROJECT_MODULE }}/build.gradle.kts | sed 's/.*versionCode = \(.*\)/\1/')
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "Extracted version: $VERSION_NAME ($VERSION_CODE)"

      - name: Run tests
        run: ./gradlew test

      - name: Build release APK
        run: ./gradlew assembleRelease

      - name: Build release AAB
        run: ./gradlew bundleRelease

      - name: Create release artifacts directory
        run: |
          mkdir -p release-artifacts
          cp ${{ env.MAIN_PROJECT_MODULE }}/build/outputs/apk/release/*.apk release-artifacts/ || true
          cp ${{ env.MAIN_PROJECT_MODULE }}/build/outputs/bundle/release/*.aab release-artifacts/ || true

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-v${{ env.VERSION_NAME }}
          path: release-artifacts/
          retention-days: 30

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION_NAME }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION_NAME }}
          name: Release v${{ env.VERSION_NAME }}
          body: |
            ## Split APK Installer v${{ env.VERSION_NAME }}

            ### Changes
            - Automated release build
            - Version Code: ${{ env.VERSION_CODE }}

            ### Downloads
            - APK files are available in the release assets
            - AAB files are available for Play Store distribution

            ### Installation
            1. Download the APK file
            2. Enable "Install from unknown sources" in Android settings
            3. Install the APK file
          files: |
            ${{ env.MAIN_PROJECT_MODULE }}/build/outputs/apk/release/*.apk
            ${{ env.MAIN_PROJECT_MODULE }}/build/outputs/bundle/release/*.aab
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
